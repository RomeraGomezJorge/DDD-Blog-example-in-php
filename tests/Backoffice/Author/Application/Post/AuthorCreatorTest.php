<?php
	
	declare(strict_types=1);
	
	namespace App\Tests\Backoffice\Author\Application\Post;
	
	use App\Backoffice\Author\Application\Post\AuthorCreator;
	use App\Backoffice\Author\Domain\Author;
	use App\Backoffice\Author\Domain\Exception\UnavailableAuthorFullname;
	use App\Tests\Backoffice\Author\AuthorModuleUnitTestCase;
	use App\Tests\Backoffice\Author\Domain\AuthorMother;
	use App\Tests\Shared\Domain\UuidMother;
	use InvalidArgumentException;
	
	final class AuthorCreatorTest extends AuthorModuleUnitTestCase
	{
		private AuthorCreator $creator;
		private Author $author;
		
		/** @test */
		public function it_should_create_a_valid_author(): void
		{
			$this->shouldHaveUniqueAuthorFullname($this->author);
			
			$this->shouldGenerateSlug($this->author->fullname());
			
			$this->shouldSave($this->author);
			
			$this->bus()->shouldReceive('publish')->once()->andReturnNull();
			
			$this->creator->__invoke($this->author->id(), $this->author->fullname(), $this->author->biography());
		}
		
		/** @test */
		public function it_should_throw_an_exception_when_the_fullname_is_not_available(): void
		{
			$this->expectException(UnavailableAuthorFullname::class);
			
			$this->shouldGenerateSlug($this->author->fullname());
			
			$this->shouldNotHaveUniqueAuthorFullname($this->author);
			
			$this->shouldNotSave();
			
			$this->shouldNotPublish();
			
			$this->creator->__invoke($this->author->id(), $this->author->fullname(), $this->author->biography());
		}
		
		/** @test */
		public function it_should_throw_an_exception_when_the_id_is_not_valid(): void
		{
			$this->expectException(InvalidArgumentException::class);
			
			$this->shouldNotSave();
			
			$this->shouldNotPublish();
			
			$this->creator->__invoke(UuidMother::invalid(), $this->author->fullname(), $this->author->biography());
		}
		
		protected function setUp(): void
		{
			parent::setUp(); // TODO: Change the autogenerated stub
			
			$this->creator = new AuthorCreator(
				$this->repository(),
				$this->authorFullnameIsAvailableSpecification(),
				$this->slugGenerator(),
				$this->bus());
			
			$this->author = AuthorMother::random();
		}
	}

